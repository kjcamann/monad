// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

// WARNING: THIS FILE CONTAINS GENERATED CODE, DO NOT EDIT MANUALLY! If
// you need changes, change the code generator or its inputs instead. This
// file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s category/vm/ctypes/v1 c -p
//    /home/ken/src/monad -fclang-format-19

/**
 * @file
 *
 * C layout-compatible types describing EVM structures
 */

#include <category/vm/runtime/base_ctypes.h>
#include <stdint.h>

// clang-format off
#ifdef __cplusplus
extern "C"
{
#endif

/// Components of intrinsic gas (g_0)
struct monad_c_evm_intrinsic_gas
{
    uint64_t base;           ///< Base cost of transaction
    uint64_t data;           ///< Cost of calldata
    uint64_t creation;       ///< Cost of contract creation
    uint64_t access_list;    ///< Cost of EIP-2930 access list entries
    uint64_t authorizations; ///< Cost of EIP-7702 authorizations
};

/// Inputs to an EVM message call
struct monad_c_evm_msg_call
{
    uint8_t opcode;               ///< EVM opcode associated with this call
    uint32_t depth;               ///< Nesting level of call
    uint64_t gas;                 ///< g: amount of gas available for call
    monad_c_address code_address; ///< c: address of account containing code
    monad_c_address sender;       ///< s: address of account sending message
    monad_c_address recipient;    ///< r: account of storage/balance/nonce changes
    monad_c_uint256_ne value;     ///< v: value transferred to recipient balance
    monad_c_bytes32 create2_salt; ///< CREATE2 salt value
    uint32_t input_data_length;   ///< Length of trailing `input` array
    uint32_t code_length;         ///< Length of trailing `code` array
};

/// Data returned by the EVM from a message call (and the entire transaction)
struct monad_c_evm_result
{
    int32_t status_code;            ///< EVMC status code
    monad_c_address create_address; ///< Address for created contract
    uint64_t gas_left;              ///< Remaining gas at result time
    uint64_t gas_refund;            ///< Refund computed by EVM
    uint32_t output_data_length;    ///< Length of trailing `output` array
};

// clang-format on

#ifdef __cplusplus
} // extern "C"
#endif
