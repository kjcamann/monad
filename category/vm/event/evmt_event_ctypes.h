// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

// WARNING: THIS FILE CONTAINS GENERATED CODE, DO NOT EDIT MANUALLY! If
// you need changes, change the code generator or its inputs instead. This
// file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s category/vm/ctypes/v1 c -p
//    /home/ken/src/monad -fclang-format-19

/**
 * @file
 *
 * Definitions of event payloads used with the EVMT event ring
 */

#include <category/core/event/event_metadata.h>
#include <category/vm/runtime/evm_ctypes.h>
#include <stddef.h>
#include <stdint.h>

// clang-format off
#ifdef __cplusplus
extern "C"
{
#endif

/// Each type of event is assigned a unique value in this enumeration
enum monad_evmt_event_type : uint16_t
{
    MONAD_EVMT_NONE,
    MONAD_EVMT_RECORD_ERROR,
    MONAD_EVMT_TXN_START,
    MONAD_EVMT_TXN_REJECT,
    MONAD_EVMT_TXN_EVM_ENTER,
    MONAD_EVMT_TXN_EVM_EXIT,
    MONAD_EVMT_MSG_CALL_ENTER,
    MONAD_EVMT_MSG_CALL_EXIT,
    MONAD_EVMT_TXN_STALL,
    MONAD_EVMT_TXN_RESTART,
    MONAD_EVMT_TXN_END,
    MONAD_EVMT_EVM_ERROR,
};

/// Reserved event type used for recording errors
typedef struct monad_event_record_error monad_evmt_record_error;

/// Stored in event descriptor's `content_ext` array to tag the transaction of
/// event
enum monad_evmt_ext_info : uint8_t
{
    MONAD_EVMT_EXT_TXN = 0,
    MONAD_EVMT_EXT_MSG_CALL = 1,
    MONAD_EVMT_EXT_GAS = 2,
};

/// Event recorded when a transaction is rejected (i.e., is invalid)
///
/// This corresponds to a value in the `TransactionError` enumeration in
/// `validate_transaction.hpp`, in the execution repo source code.
typedef uint32_t monad_evmt_txn_reject;

/// Event recorded after validation of transaction is complete
struct monad_evmt_txn_evm_enter
{
    struct monad_c_evm_intrinsic_gas
        intrinsic_gas;               ///< g*: intrinsic gas used to enter the EVM
};

/// Event recorded immediatey after EVM execution is complete
typedef struct monad_c_evm_result monad_evmt_txn_evm_exit;

/// Event recorded to introduce the scope of a message call
typedef struct monad_c_evm_msg_call monad_evmt_msg_call_enter;

/// Event recorded to exit the scope of a message call
typedef struct monad_c_evm_result monad_evmt_msg_call_exit;

/// Event recorded when transaction processing finished
struct monad_evmt_txn_end
{
    uint64_t exec_gas_refund; ///< Raw gas refund returned from EVM
    uint64_t txn_gas_refund;  ///< g*: remaining gas plus adjusted refund
    uint64_t gas_used;        ///< As in receipt, but disaggregated
};

/// Error occurred in execution process (not a validation error)
struct monad_evmt_evm_error
{
    uint64_t domain_id;  ///< Boost.Outcome domain id of error
    int64_t status_code; ///< Boost.Outcome status code of error
};

// clang-format on

constexpr size_t MONAD_EVMT_EVENT_COUNT = 12;
extern struct monad_event_metadata const
    g_monad_evmt_event_metadata[MONAD_EVMT_EVENT_COUNT];
extern uint8_t const g_monad_evmt_event_schema_hash[32];

constexpr char MONAD_EVENT_DEFAULT_EVMT_FILE_NAME[] = "monad-evmt-events";

#ifdef __cplusplus
} // extern "C"
#endif
