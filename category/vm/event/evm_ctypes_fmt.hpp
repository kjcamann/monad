// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

// WARNING: THIS FILE CONTAINS GENERATED CODE, DO NOT EDIT MANUALLY! If
// you need changes, change the code generator or its inputs instead. This
// file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s category/vm/ctypes/v1 cxx-format -p
//    /home/ken/src/monad -fclang-format-19

/**
 * @file
 *
 * Defines std::formatter specializations for the C types in `evm_ctypes.h`
 */

#include <cstddef>
#include <format>
#include <iterator>
#include <span>
#include <string>
#include <utility>

#include <category/vm/runtime/base_ctypes_fmt.hpp>
#include <category/vm/runtime/evm_ctypes.h>

template <>
struct std::formatter<monad_c_evm_intrinsic_gas> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto
    format(monad_c_evm_intrinsic_gas const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "evm_intrinsic_gas {{");
        i = std::format_to(i, "base = {}", value.base);
        i = std::format_to(i, ", data = {}", value.data);
        i = std::format_to(i, ", creation = {}", value.creation);
        i = std::format_to(i, ", access_list = {}", value.access_list);
        i = std::format_to(i, ", authorizations = {}", value.authorizations);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};
