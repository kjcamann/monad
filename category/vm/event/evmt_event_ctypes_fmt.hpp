// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

// WARNING: THIS FILE CONTAINS GENERATED CODE, DO NOT EDIT MANUALLY! If
// you need changes, change the code generator or its inputs instead. This
// file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s category/vm/ctypes/v1 cxx-format -p
//    /home/ken/src/monad -fclang-format-19

/**
 * @file
 *
 * Defines std::formatter specializations for the C types in
 * `evmt_event_ctypes.h`
 */

#include <cstddef>
#include <format>
#include <iterator>
#include <span>
#include <string>
#include <utility>

#include <category/vm/event/evmt_event_ctypes.h>
#include <category/vm/runtime/evm_ctypes_fmt.hpp>

template <>
struct std::formatter<monad_evmt_ext_info> : std::formatter<uint8_t>
{
    template <typename FormatContext>
    auto format(monad_evmt_ext_info const &value, FormatContext &ctx) const
    {
        return std::formatter<uint8_t>::format(std::to_underlying(value), ctx);
    }
};

template <>
struct std::formatter<monad_evmt_txn_evm_enter> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_evmt_txn_evm_enter const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "txn_evm_enter {{");
        i = std::format_to(i, "intrinsic_gas = {}", value.intrinsic_gas);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_evmt_txn_end> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_evmt_txn_end const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "txn_end {{");
        i = std::format_to(i, "exec_gas_refund = {}", value.exec_gas_refund);
        i = std::format_to(i, ", txn_gas_refund = {}", value.txn_gas_refund);
        i = std::format_to(i, ", gas_used = {}", value.gas_used);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_evmt_evm_error> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_evmt_evm_error const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "evm_error {{");
        i = std::format_to(i, "domain_id = {}", value.domain_id);
        i = std::format_to(i, ", status_code = {}", value.status_code);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_evmt_vm_decode> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_evmt_vm_decode const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "vm_decode {{");
        i = std::format_to(i, "pc = {}", value.pc);
        i = std::format_to(i, ", opcode = {}", value.opcode);
        i = std::format_to(
            i, ", input_stack_length = {}", value.input_stack_length);
        *i++ = '}';
        auto const *p = reinterpret_cast<std::byte const *>(&value + 1);
        i = std::format_to(
            i,
            ", input_stack = {}",
            std::span{
                reinterpret_cast<monad_c_bytes32 const *>(p),
                static_cast<size_t>(value.input_stack_length)});
        p += value.input_stack_length * sizeof(monad_c_bytes32);
        return std::formatter<std::string>::format(s, ctx);
    }
};

namespace category_labs
{

    template <std::output_iterator<char> Out>
    Out
    format_as(Out o, void const *payload_buf, monad_evmt_event_type event_type)
    {
        switch (event_type) {
        case MONAD_EVMT_NONE:
            return o;
        case MONAD_EVMT_RECORD_ERROR:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_record_error const *>(payload_buf));
        case MONAD_EVMT_TXN_START:
            return o;
        case MONAD_EVMT_TXN_REJECT:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_txn_reject const *>(payload_buf));
        case MONAD_EVMT_TXN_EVM_ENTER:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_txn_evm_enter const *>(payload_buf));
        case MONAD_EVMT_TXN_EVM_EXIT:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_txn_evm_exit const *>(payload_buf));
        case MONAD_EVMT_MSG_CALL_ENTER:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_msg_call_enter const *>(payload_buf));
        case MONAD_EVMT_MSG_CALL_EXIT:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_msg_call_exit const *>(payload_buf));
        case MONAD_EVMT_TXN_STALL:
            return o;
        case MONAD_EVMT_TXN_RESTART:
            return o;
        case MONAD_EVMT_TXN_END:
            return std::format_to(
                o, "{}", *static_cast<monad_evmt_txn_end const *>(payload_buf));
        case MONAD_EVMT_EVM_ERROR:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_evm_error const *>(payload_buf));
        case MONAD_EVMT_VM_DECODE:
            return std::format_to(
                o,
                "{}",
                *static_cast<monad_evmt_vm_decode const *>(payload_buf));
        default:
            return std::format_to(
                o, "unknown evmt type code {}", std::to_underlying(event_type));
        }
        std::unreachable();
    }

} // namespace category_labs
