// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <category/core/byte_string.hpp>
#include <category/execution/ethereum/core/block.hpp>
#include <category/execution/ethereum/core/rlp/block_rlp.hpp>
#include <category/execution/ethereum/core/transaction.hpp>
#include <category/execution/ethereum/db/block_db.hpp>

#include <intx/intx.hpp>

#include <gtest/gtest.h>

#include <test_resource_data.h>

#include <optional>

using namespace monad;
using namespace intx;
using namespace monad::literals;

TEST(Rlp_Block, DecodeEncodeBlock46402)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    bool const res = block_db.get(46'402, block);
    ASSERT_TRUE(res);

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0x6cc737fca2da03bb89557857c7558f8ad470587b99e01689efdf0df0a040b080_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0x01434e4Ac3238bEC44a39ad642aBaBBB68D097e6_address);
    EXPECT_EQ(
        block.header.state_root,
        0xbc0b8b03cb982332189c176697cfd8eaab07beef16bfb2d0ca2003a5e30a8f59_bytes32);
    EXPECT_EQ(
        block.header.transactions_root,
        0x1cf10ba2b41800cc55e1a380acc3bad7f86c7ba8a7bc3d1b1759858b6ff5ea11_bytes32);
    EXPECT_EQ(
        block.header.receipts_root,
        0x98584bc49df3557fabe5228b785fd5c0e6a57a663933110a60491924f6676dcc_bytes32);
    byte_string_fixed<256> const bloom{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00};
    EXPECT_EQ(block.header.logs_bloom, bloom);
    EXPECT_EQ(block.header.difficulty, 1467524208078);
    EXPECT_EQ(block.header.number, 46402);
    EXPECT_EQ(block.header.gas_limit, 24404);
    EXPECT_EQ(block.header.gas_used, 24000);
    EXPECT_EQ(block.header.timestamp, 1438922535);
    EXPECT_EQ(
        block.header.extra_data,
        byte_string({0x47, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2e, 0x30,
                     0x2e, 0x30, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
                     0x73, 0x2f, 0x67, 0x6f, 0x31, 0x2e, 0x34, 0x2e, 0x32}));
    EXPECT_EQ(
        block.header.prev_randao,
        0xf8808df56cbe52ae9c97985e824da926fd05505266960c37a516219f85c131d4_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0xbc, 0xfd, 0x19, 0x03, 0x4f, 0xda, 0x04, 0x90}));

    EXPECT_EQ(block.transactions.size(), 1);

    EXPECT_EQ(block.transactions[0].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[0].nonce, 3);
    EXPECT_EQ(block.transactions[0].max_fee_per_gas, 10000000000000);
    EXPECT_EQ(block.transactions[0].gas_limit, 24000);
    EXPECT_EQ(block.transactions[0].to, std::nullopt);
    EXPECT_EQ(block.transactions[0].value, 0);
    EXPECT_EQ(block.transactions[0].sc.chain_id, std::nullopt);
    EXPECT_EQ(
        block.transactions[0].sc.r,
        0x589b4531c6d66f6850277af29e06e60b28a280916ccbb38595bf3347aca65c2c_u256);
    EXPECT_EQ(
        block.transactions[0].sc.s,
        0x40b1a3d6e47a04c0cd78506aa7d3aa0aeef734d7942424abdb64c88c2ba5f536_u256);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeBlock2730000)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    EXPECT_TRUE(block_db.get(2'730'000, block));

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0x18057c6cc208419928dbf4891af02d865f5d72f34f1880a3a3674b6a2585d8ec_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8_address);
    EXPECT_EQ(
        block.header.state_root,
        0xbda8c4941b104eb8b2a698eef53e5bfa63f40b7497f2426a619623a82bdbfacd_bytes32);
    EXPECT_EQ(
        block.header.transactions_root,
        0xb8b56032319f2966f9acd212ecba4db778930400fd0e88686b4d78b0d0910f3c_bytes32);
    EXPECT_EQ(
        block.header.receipts_root,
        0xa0a4041c26966615a762550d5c8b741cc5df0cf2bef6c1755e0872543b2172af_bytes32);
    byte_string_fixed<256> const bloom{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00};
    EXPECT_EQ(block.header.logs_bloom, bloom);
    EXPECT_EQ(block.header.difficulty, 71133750415151);
    EXPECT_EQ(block.header.number, 2730000);
    EXPECT_EQ(block.header.gas_limit, 3293766);
    EXPECT_EQ(block.header.gas_used, 84000);
    EXPECT_EQ(block.header.timestamp, 1480625618);
    EXPECT_EQ(
        block.header.extra_data,
        byte_string(
            {0x65,
             0x74,
             0x68,
             0x65,
             0x72,
             0x6d,
             0x69,
             0x6e,
             0x65,
             0x20,
             0x2d,
             0x20,
             0x45,
             0x55,
             0x31}));
    EXPECT_EQ(
        block.header.prev_randao,
        0xddaee79223f62970af2d96b378c6069639af5c93f34cc933948ae9af3896d7e5_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0x5b, 0x75, 0xd1, 0x38, 0x22, 0xb5, 0xe1, 0xd4}));

    EXPECT_EQ(block.transactions.size(), 4);

    EXPECT_EQ(block.transactions[0].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[0].nonce, 1639528);
    EXPECT_EQ(block.transactions[0].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[0].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[0].to,
        0xBB474EdbC0C6ecF5c0455F8e6F90b8D46098e016_address);
    EXPECT_EQ(block.transactions[0].value, 0x3dd59a7fca63400_u256);
    EXPECT_EQ(block.transactions[0].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[0].sc.r,
        0xb813e0d752532446aa766198ec73cd0d975052cfe09d3ffb375aa92ae53c6f13_u256);
    EXPECT_EQ(
        block.transactions[0].sc.s,
        0x6a9c9bedc2c9ca2fc96dff90911540457716182822b8f28125040866b420492f_u256);

    EXPECT_EQ(block.transactions[1].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[1].nonce, 886728);
    EXPECT_EQ(block.transactions[1].max_fee_per_gas, 20000000000);
    EXPECT_EQ(block.transactions[1].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[1].to,
        0x288E49EDb33A4B88860e8ce10A0407eaefd7dfdA_address);
    EXPECT_EQ(block.transactions[1].value, 0x6ef6dd445b94970_u256);
    EXPECT_EQ(block.transactions[1].sc.chain_id, 0x1);
    EXPECT_EQ(
        block.transactions[1].sc.r,
        0x928ab5ed683df54e59ef2a849bf83b4ee2f49e232e4a2a3d411594ce6377287c_u256);
    EXPECT_EQ(
        block.transactions[1].sc.s,
        0x6b332e891a4f5b051f49016a79cfbac771061153af9660697d900325bcebef51_u256);

    EXPECT_EQ(block.transactions[2].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[2].nonce, 1639529);
    EXPECT_EQ(block.transactions[2].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[2].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[2].to,
        0xA7895d323bFc62E82dE69D208E5d1670708588eB_address);
    EXPECT_EQ(block.transactions[2].value, 0x3d3c2fc0caddc00_u256);
    EXPECT_EQ(block.transactions[2].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[2].sc.r,
        0x7b86ce1ec9f35571228f085bd4f9ef4a5f69b52bb3dbf3c5fdf20d3a636deba_u256);
    EXPECT_EQ(
        block.transactions[2].sc.s,
        0x2ef365b24554adad7514ae5337c669c59a9c2affdb5663aa96850cc2efd0df89_u256);

    EXPECT_EQ(block.transactions[3].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[3].nonce, 886729);
    EXPECT_EQ(block.transactions[3].max_fee_per_gas, 20000000000);
    EXPECT_EQ(block.transactions[3].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[3].to,
        0x31Cca7cc41128aeFCD0E35D9bdeBAdC75bF7CA27_address);
    EXPECT_EQ(block.transactions[3].value, 0xdee6c72f83b7184_u256);
    EXPECT_EQ(block.transactions[3].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[3].sc.r,
        0xab34ebfd6c27049f4cd3246c75adb7d6798a085153cdb917388e76c61ba599ab_u256);
    EXPECT_EQ(
        block.transactions[3].sc.s,
        0x20197a6f1c95fb5a228e83f1605075d007ff1ac35509edb5683cbff30ecf4f2d_u256);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeBlock2730001)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    EXPECT_TRUE(block_db.get(2'730'001, block));

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0xfa0e5ba976931459e7aff38ba3800dfb4e75ba52b185cd41973d013b62c30b90_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8_address);
    EXPECT_EQ(
        block.header.state_root,
        0x7b674fc920d494b1186195fd9b81067c5311373e268972bc1fd3555768c5b119_bytes32);
    EXPECT_EQ(
        block.header.transactions_root,
        0x485c5b45e59fa0648fca6f98da717190f5516d6c36a4d57c598efe28f6a09f30_bytes32);
    EXPECT_EQ(
        block.header.receipts_root,
        0x062ee20c7a32c027eeb188a5137fd7b2f1c08fd75b2bc98f543a49973deeea99_bytes32);
    EXPECT_EQ(block.header.difficulty, 71064317416445);
    EXPECT_EQ(block.header.number, 2730001);
    EXPECT_EQ(block.header.gas_limit, 3296981);
    EXPECT_EQ(block.header.gas_used, 196834);
    EXPECT_EQ(block.header.timestamp, 1480625657);
    EXPECT_EQ(
        block.header.extra_data,
        byte_string(
            {0x65,
             0x74,
             0x68,
             0x65,
             0x72,
             0x6d,
             0x69,
             0x6e,
             0x65,
             0x20,
             0x2d,
             0x20,
             0x55,
             0x53,
             0x31}));
    EXPECT_EQ(
        block.header.prev_randao,
        0xd8f930ce60f06c311b18771b71eed46d1a62b371b9577ac2136259accf0b3033_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0x53, 0x29, 0x32, 0x80, 0x0d, 0x25, 0x45, 0xa0}));

    EXPECT_EQ(block.transactions.size(), 7);

    EXPECT_EQ(block.transactions[0].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[0].nonce, 1639530);
    EXPECT_EQ(block.transactions[0].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[0].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[0].to,
        0x92A4bc572595ed4851E0AbF8fF72a77bBa9323C0_address);
    EXPECT_EQ(block.transactions[0].value, 0x3b7e74a7f3af400_u256);
    EXPECT_EQ(block.transactions[0].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[0].sc.r,
        0xfda8c8573a5ef9828d1d68d76be177b52070e9fb95578a4038cf059b53755325_u256);
    EXPECT_EQ(
        block.transactions[0].sc.s,
        0x32ad76b637d1d947936ed806b499c1b5df8d6d18fe598ba776523a2cce73dee5_u256);

    EXPECT_EQ(block.transactions[1].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[1].nonce, 21);
    EXPECT_EQ(block.transactions[1].max_fee_per_gas, 20000000000);
    EXPECT_EQ(block.transactions[1].gas_limit, 300000);
    EXPECT_EQ(
        *block.transactions[1].to,
        0x65C28345d499b59606cFe3d0ed580a1d2370C7C9_address);
    EXPECT_EQ(block.transactions[1].value, 0);
    EXPECT_EQ(
        block.transactions[1].sc.chain_id,
        std::optional<uint64_t>{}); // This transaction doesn't have a chain_id
                                    // associated
    EXPECT_EQ(
        block.transactions[1].sc.r,
        0xb821bab9f7e78c13d73beaf9cf6e9d2b33bbf2923ae25da58d7efb7a72fd607b_u256);
    EXPECT_EQ(
        block.transactions[1].sc.s,
        0x3b6699532ca1a2115e2b516695d80f400568619e9301b55ace126558f2126d2_u256);

    EXPECT_EQ(block.transactions[2].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[2].nonce, 92940);
    EXPECT_EQ(block.transactions[2].max_fee_per_gas, 20000000000);
    EXPECT_EQ(block.transactions[2].gas_limit, 39000);
    EXPECT_EQ(
        *block.transactions[2].to,
        0xeDc53fB256c8F5cd6f91AF675BBb89bFC3732c57_address);
    EXPECT_EQ(block.transactions[2].value, 0xe7f24b03527b860_u256);
    EXPECT_EQ(block.transactions[2].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[2].sc.r,
        0x1c850d46aa7976049de360c0d85fac4355a44f2c7e3533bef8edc372989d37_u256);
    EXPECT_EQ(
        block.transactions[2].sc.s,
        0x8b6142aeaab3391881c9ebd7697285a690c9a1e328f7e4869b83da2e4690f55_u256);

    EXPECT_EQ(block.transactions[3].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[3].nonce, 886730);
    EXPECT_EQ(block.transactions[3].max_fee_per_gas, 20000000000);
    EXPECT_EQ(block.transactions[3].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[3].to,
        0x33BE3ADC19fD04a21bEd5d55DC1FD1F9Df5439E1_address);
    EXPECT_EQ(block.transactions[3].value, 0xe282b737fa1986c_u256);
    EXPECT_EQ(block.transactions[3].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[3].sc.r,
        0xa52ba8691cb3857e56f7e382d108d3283ed1d40c271a7870bb3247992d4e50b0_u256);
    EXPECT_EQ(
        block.transactions[3].sc.s,
        0x5cfc68a3d0a5ec17b19515b84e1de5576d5f8ffdc5eebeb4671b864c50d34ed7_u256);

    EXPECT_EQ(block.transactions[4].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[4].nonce, 1639531);
    EXPECT_EQ(block.transactions[4].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[4].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[4].to,
        0x57a5809cb4ED2e40630f5A0F26273dc08A9a92cd_address);
    EXPECT_EQ(block.transactions[4].value, 0x39473f637aa0800_u256);
    EXPECT_EQ(block.transactions[4].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[4].sc.r,
        0x98753c57dc147ca4fba5eb4038d03fb7751dd5c940e22e1774e8d22db5b22169_u256);
    EXPECT_EQ(
        block.transactions[4].sc.s,
        0x7317951a0f0b2cd45647407b2b9c87fc89d311ff03913d2c2f42041c15d634a5_u256);

    EXPECT_EQ(block.transactions[5].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[5].nonce, 1639532);
    EXPECT_EQ(block.transactions[5].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[5].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[5].to,
        0x009fAC3897c8Acbc0AE6e2a92Bc0755AA9E91DCc_address);
    EXPECT_EQ(block.transactions[5].value, 0x3907052df885000_u256);
    EXPECT_EQ(block.transactions[5].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[5].sc.r,
        0xf4d94f88f029f3b64b280dbd034fdfce92f048166b85d95d21ea82913c4b428b_u256);
    EXPECT_EQ(
        block.transactions[5].sc.s,
        0x46c6acae965e6c8fe44785a8461b430b34c0983542aaf11a8d22de5add2f6bb2_u256);

    EXPECT_EQ(block.transactions[6].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[6].nonce, 1639533);
    EXPECT_EQ(block.transactions[6].max_fee_per_gas, 25000000000);
    EXPECT_EQ(block.transactions[6].gas_limit, 90000);
    EXPECT_EQ(
        *block.transactions[6].to,
        0x54Ee2a8B5C61a45749E89471C75d45d3159D6947_address);
    EXPECT_EQ(block.transactions[6].value, 0x38ebe0341834c00_u256);
    EXPECT_EQ(block.transactions[6].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[6].sc.r,
        0x93fd750d39fbab2ad14865d77438556f4a7c17225cfdb423c9ec07db6790253c_u256);
    EXPECT_EQ(
        block.transactions[6].sc.s,
        0x3a712aead4cd85c472b6f7996b4adab96e63ac9e7a7d408944e385c39e870c4e_u256);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeBlock2730002)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    EXPECT_TRUE(block_db.get(2'730'002, block));

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0x46d016199b63472c503b5d26b33f22a810d20f552085433177b4817c59327eba_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0x61C808D82A3Ac53231750daDc13c777b59310bD9_address);
    EXPECT_EQ(
        block.header.state_root,
        0x0adde1fb82a1735191d30b109e92441a53a10edee0d2f4f63114f134f8db6e8c_bytes32);
    EXPECT_EQ(block.header.transactions_root, NULL_ROOT);
    EXPECT_EQ(block.header.receipts_root, NULL_ROOT);
    EXPECT_EQ(block.header.difficulty, 71029651597139);
    EXPECT_EQ(block.header.number, 2730002);
    EXPECT_EQ(block.header.gas_limit, 3294051);
    EXPECT_EQ(block.header.gas_used, 0);
    EXPECT_EQ(block.header.timestamp, 1480625678);
    EXPECT_EQ(
        block.header.extra_data,
        byte_string(
            {0xe4,
             0xb8,
             0x83,
             0xe5,
             0xbd,
             0xa9,
             0xe7,
             0xa5,
             0x9e,
             0xe4,
             0xbb,
             0x99,
             0xe9,
             0xb1,
             0xbc}));
    EXPECT_EQ(
        block.header.prev_randao,
        0x51a858ec8d71f4ccc5a270916046928bcc5b738e418048c32a26ebb5b6614b76_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0x75, 0xa7, 0x11, 0x00, 0x0c, 0x57, 0xaa, 0x39}));

    EXPECT_EQ(block.transactions.size(), 0);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeBlock2730009)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    EXPECT_TRUE(block_db.get(2730009, block));

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0x278677e93d6b23c260fbedeccbace563c1c8708c6a632bf0730a55c117c4cb78_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0x2a65Aca4D5fC5B5C859090a6c34d164135398226_address);
    EXPECT_EQ(
        block.header.state_root,
        0x9be6e85fc6dcd2c9493aab527bc1eed17a2cbbefc6cae43db11a57f110ef3d7b_bytes32);
    EXPECT_EQ(block.header.transactions_root, NULL_ROOT);
    EXPECT_EQ(block.header.receipts_root, NULL_ROOT);
    EXPECT_EQ(block.header.difficulty, 71168718072168);
    EXPECT_EQ(block.header.number, 2730009);
    EXPECT_EQ(block.header.gas_limit, 3300000);
    EXPECT_EQ(block.header.gas_used, 0);
    EXPECT_EQ(block.header.timestamp, 1480625740);
    EXPECT_EQ(
        block.header.extra_data,
        byte_string({0x44, 0x77, 0x61, 0x72, 0x66, 0x50, 0x6f, 0x6f, 0x6c}));
    EXPECT_EQ(
        block.header.prev_randao,
        0x5ae4c715f311145efa42db41eacf339f996e247a94573692ce8f85d1e363819c_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0x11, 0x1a, 0x14, 0xd8, 0x09, 0x1d, 0x06, 0xe8}));

    EXPECT_EQ(block.transactions.size(), 0);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeBlock14000000)
{
    Block block;
    BlockDb const block_db(test_resource::correct_block_data_dir);
    EXPECT_TRUE(block_db.get(14'000'000, block));

    // Header
    EXPECT_EQ(
        block.header.parent_hash,
        0x0c9ef41f038aa58a4aa2810fda03d9d82aac9082c80283230fd74cb1cceb4b00_bytes32);
    EXPECT_EQ(block.header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        block.header.beneficiary,
        0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8_address);
    EXPECT_EQ(
        block.header.state_root,
        0xfb3df73e7a41d500a374ee236dd613bb24f1a5fa5b80615a7953ea75c26c6a6d_bytes32);
    EXPECT_EQ(
        block.header.transactions_root,
        0x16b6ff83df3ef14f614c70ac29e8a05d102c6bed0e5882c284abf0120b89529c_bytes32);
    EXPECT_EQ(
        block.header.receipts_root,
        0xf7b9f8e92a4b420a27302ab91084e5499d3d711183a021f4956ff32de246e14e_bytes32);

    byte_string_fixed<256> const bloom{
        0x08, 0x38, 0x15, 0x04, 0x13, 0x00, 0x08, 0x10, 0x40, 0xf4, 0x85, 0x08,
        0x80, 0x03, 0xde, 0x10, 0x04, 0x60, 0x40, 0x49, 0x1c, 0x3c, 0x01, 0x64,
        0x18, 0x98, 0x30, 0xca, 0x3c, 0x2c, 0x0d, 0x11, 0x21, 0x04, 0x04, 0x93,
        0x00, 0x8b, 0xa6, 0x00, 0x92, 0x48, 0x49, 0x82, 0x0c, 0x89, 0x01, 0x13,
        0x0b, 0x00, 0x84, 0x03, 0x88, 0x02, 0x61, 0x07, 0x06, 0x00, 0x0b, 0x61,
        0x01, 0xb2, 0x20, 0xd0, 0x12, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0b, 0x08,
        0x48, 0x08, 0x50, 0x88, 0x0d, 0x02, 0x26, 0xa0, 0x40, 0x24, 0xe1, 0x07,
        0x00, 0x51, 0x14, 0x51, 0x34, 0x10, 0x02, 0x10, 0x80, 0x08, 0x04, 0x51,
        0x12, 0x60, 0x63, 0x40, 0x0a, 0x10, 0x84, 0x02, 0x1c, 0x62, 0xbc, 0x08,
        0x29, 0x00, 0x08, 0xa0, 0x43, 0x00, 0x81, 0x54, 0x0c, 0x89, 0x25, 0x45,
        0x36, 0x0c, 0x40, 0x14, 0x10, 0x19, 0x40, 0x21, 0x42, 0x61, 0x03, 0x22,
        0x82, 0x49, 0x16, 0x28, 0x00, 0xac, 0x01, 0x66, 0x01, 0x10, 0x0d, 0x05,
        0x20, 0xb9, 0x62, 0x03, 0x43, 0x20, 0x80, 0x08, 0x6a, 0x00, 0x42, 0x4d,
        0x82, 0x14, 0x01, 0x0b, 0x63, 0x18, 0x04, 0x71, 0x31, 0x86, 0x34, 0xd0,
        0xae, 0x00, 0x10, 0x80, 0x41, 0xa1, 0x18, 0x44, 0x88, 0xa1, 0x08, 0x41,
        0xa2, 0x61, 0x0e, 0x04, 0x01, 0xe9, 0x00, 0x1a, 0x50, 0x4a, 0x40, 0x10,
        0x09, 0x81, 0x82, 0x02, 0x08, 0x08, 0x15, 0x50, 0x27, 0x00, 0x9c, 0x02,
        0x00, 0x8e, 0x56, 0x07, 0x0c, 0x28, 0x72, 0x81, 0x14, 0x48, 0x04, 0x90,
        0x40, 0x08, 0x01, 0xca, 0xc0, 0x10, 0x29, 0x0a, 0xe2, 0x91, 0xa0, 0x0c,
        0xa0, 0x40, 0x8b, 0x60, 0x20, 0x4c, 0x12, 0x80, 0x12, 0x60, 0x1c, 0x10,
        0x0a, 0x24, 0xcc, 0x01, 0xe1, 0x00, 0x89, 0x72, 0x42, 0x83, 0x2a, 0x82,
        0x50, 0x00, 0xc1, 0xe1};
    EXPECT_EQ(block.header.logs_bloom, bloom);
    EXPECT_EQ(block.header.difficulty, 12316581093827601);
    EXPECT_EQ(block.header.number, 14000000);
    EXPECT_EQ(block.header.gas_limit, 30058561);
    EXPECT_EQ(block.header.gas_used, 8119826);
    EXPECT_EQ(block.header.timestamp, 1642114795);

    EXPECT_EQ(
        block.header.extra_data,
        byte_string({0x61, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69,
                     0x61, 0x2d, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65,
                     0x61, 0x73, 0x74, 0x31, 0x2d, 0x31}));
    EXPECT_EQ(
        block.header.prev_randao,
        0xa832679fcf3e71f0b29bd5913955151be5bf1fc59e135e3c7eb6e30f8442a5df_bytes32);
    EXPECT_EQ(
        block.header.nonce,
        byte_string_fixed<8UL>(
            {0x31, 0xe7, 0xe9, 0x9d, 0xf1, 0x8e, 0x04, 0x24}));

    EXPECT_EQ(block.transactions.size(), 112);

    EXPECT_EQ(block.transactions[0].type, TransactionType::eip1559);
    EXPECT_EQ(block.transactions[0].nonce, 2760);
    EXPECT_EQ(block.transactions[0].max_priority_fee_per_gas, 8540000000);
    EXPECT_EQ(block.transactions[0].max_fee_per_gas, 291900000000);
    EXPECT_EQ(block.transactions[0].gas_limit, 1395940);
    EXPECT_EQ(
        *block.transactions[0].to,
        0x9008d19f58aabd9ed0d60971565aa8510560ab41_address);
    EXPECT_EQ(block.transactions[0].value, 0);
    EXPECT_EQ(block.transactions[0].access_list.size(), 0);

    EXPECT_EQ(*block.transactions[0].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[0].sc.r,
        0xd2fed4e113738c74b4df1ccc9b0aab7a8dcd5dd1f30b9dcca5259a16f6b7c865_u256);
    EXPECT_EQ(
        block.transactions[0].sc.s,
        0x1dc7444f10bbd53b1f6f8d3a18916222a28539d76f8859ce3671f85eeb781d04_u256);

    EXPECT_EQ(block.transactions[1].type, TransactionType::legacy);
    EXPECT_EQ(block.transactions[1].nonce, 947217);
    EXPECT_EQ(block.transactions[1].max_fee_per_gas, 230000000000);
    EXPECT_EQ(block.transactions[1].gas_limit, 207128);
    EXPECT_EQ(
        *block.transactions[1].to,
        0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce_address);
    EXPECT_EQ(block.transactions[1].value, 0);

    EXPECT_EQ(*block.transactions[1].sc.chain_id, 0x01);
    EXPECT_EQ(
        block.transactions[1].sc.r,
        0x02ea61dac7a25c05d09b36b9a8221974c109e0a8cbb656c3dfe849cdc09054b0_u256);
    EXPECT_EQ(
        block.transactions[1].sc.s,
        0x09c059fae0f809e1405656d1f42efaa3e3a30b278e4d63602bbc680b33992a5c_u256);

    EXPECT_EQ(block.ommers.size(), 0);

    // check encoding
    auto const encoded_block = rlp::encode_block(block);
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(decoded_block.value(), block);
}

TEST(Rlp_Block, DecodeEncodeShanghai)
{
    byte_string const encoded_block = byte_string{
        0xf9, 0x02, 0x8c, 0xf9, 0x02, 0x19, 0xa0, 0x15, 0x19, 0x34, 0xad, 0x9b,
        0x65, 0x4c, 0x50, 0x19, 0x7f, 0x37, 0x01, 0x8e, 0xe5, 0xee, 0x9b, 0xb9,
        0x22, 0xde, 0xc0, 0xa1, 0xb5, 0xe2, 0x4a, 0x6d, 0x67, 0x9c, 0xb1, 0x11,
        0xcd, 0xb1, 0x07, 0xa0, 0x1d, 0xcc, 0x4d, 0xe8, 0xde, 0xc7, 0x5d, 0x7a,
        0xab, 0x85, 0xb5, 0x67, 0xb6, 0xcc, 0xd4, 0x1a, 0xd3, 0x12, 0x45, 0x1b,
        0x94, 0x8a, 0x74, 0x13, 0xf0, 0xa1, 0x42, 0xfd, 0x40, 0xd4, 0x93, 0x47,
        0x94, 0x2a, 0xdc, 0x25, 0x66, 0x50, 0x18, 0xaa, 0x1f, 0xe0, 0xe6, 0xbc,
        0x66, 0x6d, 0xac, 0x8f, 0xc2, 0x69, 0x7f, 0xf9, 0xba, 0xa0, 0x48, 0xcd,
        0x9a, 0x59, 0x57, 0xe4, 0x5b, 0xee, 0xbf, 0x80, 0x27, 0x8a, 0x52, 0x08,
        0xb0, 0xcb, 0xe9, 0x75, 0xab, 0x4b, 0x4a, 0xdb, 0x0d, 0xa1, 0x50, 0x9c,
        0x67, 0xb2, 0x6f, 0x2b, 0xe3, 0xff, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b,
        0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b,
        0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5, 0xe3,
        0x63, 0xb4, 0x21, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6,
        0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b,
        0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21,
        0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x88, 0x7f, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x82, 0x07, 0x9e, 0x42, 0xa0,
        0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6,
        0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0,
        0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21, 0x88, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xa0, 0x4a, 0x22, 0x0e, 0xbe, 0x55,
        0x03, 0x4d, 0x51, 0xf8, 0xa5, 0x81, 0x75, 0xbb, 0x50, 0x4b, 0x6e, 0xbf,
        0x88, 0x31, 0x05, 0x01, 0x0a, 0x1f, 0x6d, 0x42, 0xe5, 0x57, 0xc1, 0x8b,
        0xbd, 0x5d, 0x69, 0xc0, 0xc0, 0xf8, 0x6c, 0xda, 0x80, 0x80, 0x94, 0xc9,
        0x4f, 0x53, 0x74, 0xfc, 0xe5, 0xed, 0xbc, 0x8e, 0x2a, 0x86, 0x97, 0xc1,
        0x53, 0x31, 0x67, 0x7e, 0x6e, 0xbf, 0x0b, 0x82, 0x27, 0x10, 0xda, 0x02,
        0x80, 0x94, 0xc9, 0x4f, 0x53, 0x74, 0xfc, 0xe5, 0xed, 0xbc, 0x8e, 0x2a,
        0x86, 0x97, 0xc1, 0x53, 0x31, 0x67, 0x7e, 0x6e, 0xbf, 0x0b, 0x82, 0x27,
        0x10, 0xda, 0x01, 0x80, 0x94, 0xc9, 0x4f, 0x53, 0x74, 0xfc, 0xe5, 0xed,
        0xbc, 0x8e, 0x2a, 0x86, 0x97, 0xc1, 0x53, 0x31, 0x67, 0x7e, 0x6e, 0xbf,
        0x0b, 0x82, 0x27, 0x10, 0xda, 0x02, 0x01, 0x94, 0xc9, 0x4f, 0x53, 0x74,
        0xfc, 0xe5, 0xed, 0xbc, 0x8e, 0x2a, 0x86, 0x97, 0xc1, 0x53, 0x31, 0x67,
        0x7e, 0x6e, 0xbf, 0x0b, 0x82, 0x27, 0x10};

    auto const encoded_block_copy = encoded_block;
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    // Header
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(
        decoded_block.value().header.parent_hash,
        0x151934ad9b654c50197f37018ee5ee9bb922dec0a1b5e24a6d679cb111cdb107_bytes32);
    EXPECT_EQ(decoded_block.value().header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        decoded_block.value().header.beneficiary,
        0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba_address);
    EXPECT_EQ(
        decoded_block.value().header.state_root,
        0x48cd9a5957e45beebf80278a5208b0cbe975ab4b4adb0da1509c67b26f2be3ff_bytes32);
    EXPECT_EQ(decoded_block.value().header.transactions_root, NULL_ROOT);
    EXPECT_EQ(decoded_block.value().header.receipts_root, NULL_ROOT);
    byte_string_fixed<256> const bloom{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00};
    EXPECT_EQ(decoded_block.value().header.logs_bloom, bloom);
    EXPECT_EQ(decoded_block.value().header.difficulty, 0);
    EXPECT_EQ(decoded_block.value().header.number, 1);
    EXPECT_EQ(decoded_block.value().header.gas_limit, 0x7fffffffffffffff);
    EXPECT_EQ(decoded_block.value().header.gas_used, 0);
    EXPECT_EQ(decoded_block.value().header.timestamp, 0x079e);
    EXPECT_EQ(decoded_block.value().header.extra_data, byte_string({0x42}));
    EXPECT_EQ(
        decoded_block.value().header.prev_randao,
        0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421_bytes32);
    EXPECT_EQ(
        decoded_block.value().header.nonce,
        byte_string_fixed<8UL>(
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
    EXPECT_TRUE(decoded_block.value().header.base_fee_per_gas.has_value());
    EXPECT_EQ(decoded_block.value().header.base_fee_per_gas.value(), 0x09);

    // EIP-4895
    EXPECT_TRUE(decoded_block.value().header.withdrawals_root.has_value());
    EXPECT_EQ(
        decoded_block.value().header.withdrawals_root.value(),
        0x4a220ebe55034d51f8a58175bb504b6ebf883105010a1f6d42e557c18bbd5d69_bytes32);

    // Transaction
    EXPECT_EQ(decoded_block.value().transactions.size(), 0);

    // Withdrawals: EIP-4895
    EXPECT_TRUE(decoded_block.value().withdrawals.has_value());
    EXPECT_EQ(decoded_block.value().withdrawals.value().size(), 4);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[0].index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[0].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[0].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[0].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[1].index, 0x02);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[1].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[1].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[1].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[2].index, 0x01);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[2].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[2].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[2].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[3].index, 0x02);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[3].validator_index, 0x01);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[3].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[3].amount, 0x2710);

    // check encoding
    auto const encoded_block_from_decoded =
        rlp::encode_block(decoded_block.value());
    EXPECT_EQ(encoded_block_from_decoded, encoded_block_copy);
}

TEST(Rlp_Block, DecodeEncodeCancun)
{
    // block header mostly the same as the one in Shanghai unit test, except
    // that this adds Cancun fields.
    byte_string const encoded_block = byte_string{
        0xf9, 0x02, 0xaf, 0xf9, 0x02, 0x3c, 0xa0, 0x15, 0x19, 0x34, 0xad, 0x9b,
        0x65, 0x4c, 0x50, 0x19, 0x7f, 0x37, 0x01, 0x8e, 0xe5, 0xee, 0x9b, 0xb9,
        0x22, 0xde, 0xc0, 0xa1, 0xb5, 0xe2, 0x4a, 0x6d, 0x67, 0x9c, 0xb1, 0x11,
        0xcd, 0xb1, 0x07, 0xa0, 0x1d, 0xcc, 0x4d, 0xe8, 0xde, 0xc7, 0x5d, 0x7a,
        0xab, 0x85, 0xb5, 0x67, 0xb6, 0xcc, 0xd4, 0x1a, 0xd3, 0x12, 0x45, 0x1b,
        0x94, 0x8a, 0x74, 0x13, 0xf0, 0xa1, 0x42, 0xfd, 0x40, 0xd4, 0x93, 0x47,
        0x94, 0x2a, 0xdc, 0x25, 0x66, 0x50, 0x18, 0xaa, 0x1f, 0xe0, 0xe6, 0xbc,
        0x66, 0x6d, 0xac, 0x8f, 0xc2, 0x69, 0x7f, 0xf9, 0xba, 0xa0, 0x48, 0xcd,
        0x9a, 0x59, 0x57, 0xe4, 0x5b, 0xee, 0xbf, 0x80, 0x27, 0x8a, 0x52, 0x08,
        0xb0, 0xcb, 0xe9, 0x75, 0xab, 0x4b, 0x4a, 0xdb, 0x0d, 0xa1, 0x50, 0x9c,
        0x67, 0xb2, 0x6f, 0x2b, 0xe3, 0xff, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b,
        0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b,
        0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5, 0xe3,
        0x63, 0xb4, 0x21, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6,
        0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b,
        0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21,
        0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x88, 0x7f, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x82, 0x07, 0x9e, 0x42, 0xa0,
        0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6,
        0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0,
        0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21, 0x88, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xa0, 0x4a, 0x22, 0x0e, 0xbe, 0x55,
        0x03, 0x4d, 0x51, 0xf8, 0xa5, 0x81, 0x75, 0xbb, 0x50, 0x4b, 0x6e, 0xbf,
        0x88, 0x31, 0x05, 0x01, 0x0a, 0x1f, 0x6d, 0x42, 0xe5, 0x57, 0xc1, 0x8b,
        0xbd, 0x5d, 0x69, 0x20, 0x50, 0xa0, 0x01, 0x31, 0xa0, 0xbf, 0x6d, 0x23,
        0x57, 0x67, 0xfb, 0xd0, 0x4a, 0xa2, 0x39, 0x77, 0xa9, 0x20, 0x1b, 0xfd,
        0xb0, 0x8c, 0xd6, 0xe5, 0x88, 0xa9, 0x7f, 0xed, 0xf5, 0xd1, 0xca, 0xd4,
        0xff, 0xed, 0xc0, 0xc0, 0xf8, 0x6c, 0xda, 0x80, 0x80, 0x94, 0xc9, 0x4f,
        0x53, 0x74, 0xfc, 0xe5, 0xed, 0xbc, 0x8e, 0x2a, 0x86, 0x97, 0xc1, 0x53,
        0x31, 0x67, 0x7e, 0x6e, 0xbf, 0x0b, 0x82, 0x27, 0x10, 0xda, 0x02, 0x80,
        0x94, 0xc9, 0x4f, 0x53, 0x74, 0xfc, 0xe5, 0xed, 0xbc, 0x8e, 0x2a, 0x86,
        0x97, 0xc1, 0x53, 0x31, 0x67, 0x7e, 0x6e, 0xbf, 0x0b, 0x82, 0x27, 0x10,
        0xda, 0x01, 0x80, 0x94, 0xc9, 0x4f, 0x53, 0x74, 0xfc, 0xe5, 0xed, 0xbc,
        0x8e, 0x2a, 0x86, 0x97, 0xc1, 0x53, 0x31, 0x67, 0x7e, 0x6e, 0xbf, 0x0b,
        0x82, 0x27, 0x10, 0xda, 0x02, 0x01, 0x94, 0xc9, 0x4f, 0x53, 0x74, 0xfc,
        0xe5, 0xed, 0xbc, 0x8e, 0x2a, 0x86, 0x97, 0xc1, 0x53, 0x31, 0x67, 0x7e,
        0x6e, 0xbf, 0x0b, 0x82, 0x27, 0x10};

    auto const encoded_block_copy = encoded_block;
    byte_string_view encoded_block_view{encoded_block};

    auto const decoded_block = rlp::decode_block(encoded_block_view);
    // Header
    ASSERT_FALSE(decoded_block.has_error());
    EXPECT_EQ(encoded_block_view.size(), 0);
    EXPECT_EQ(
        decoded_block.value().header.parent_hash,
        0x151934ad9b654c50197f37018ee5ee9bb922dec0a1b5e24a6d679cb111cdb107_bytes32);
    EXPECT_EQ(decoded_block.value().header.ommers_hash, NULL_LIST_HASH);
    EXPECT_EQ(
        decoded_block.value().header.beneficiary,
        0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba_address);
    EXPECT_EQ(
        decoded_block.value().header.state_root,
        0x48cd9a5957e45beebf80278a5208b0cbe975ab4b4adb0da1509c67b26f2be3ff_bytes32);
    EXPECT_EQ(decoded_block.value().header.transactions_root, NULL_ROOT);
    EXPECT_EQ(decoded_block.value().header.receipts_root, NULL_ROOT);
    byte_string_fixed<256> const bloom{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00};
    EXPECT_EQ(decoded_block.value().header.logs_bloom, bloom);
    EXPECT_EQ(decoded_block.value().header.difficulty, 0);
    EXPECT_EQ(decoded_block.value().header.number, 1);
    EXPECT_EQ(decoded_block.value().header.gas_limit, 0x7fffffffffffffff);
    EXPECT_EQ(decoded_block.value().header.gas_used, 0);
    EXPECT_EQ(decoded_block.value().header.timestamp, 0x079e);
    EXPECT_EQ(decoded_block.value().header.extra_data, byte_string({0x42}));
    EXPECT_EQ(
        decoded_block.value().header.prev_randao,
        0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421_bytes32);
    EXPECT_EQ(
        decoded_block.value().header.nonce,
        byte_string_fixed<8UL>(
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
    EXPECT_TRUE(decoded_block.value().header.base_fee_per_gas.has_value());
    EXPECT_EQ(decoded_block.value().header.base_fee_per_gas.value(), 0x09);

    // EIP-4895
    EXPECT_TRUE(decoded_block.value().header.withdrawals_root.has_value());
    EXPECT_EQ(
        decoded_block.value().header.withdrawals_root.value(),
        0x4a220ebe55034d51f8a58175bb504b6ebf883105010a1f6d42e557c18bbd5d69_bytes32);

    // EIP-4844
    EXPECT_TRUE(decoded_block.value().header.blob_gas_used.has_value());
    EXPECT_EQ(decoded_block.value().header.blob_gas_used.value(), 0x20);
    EXPECT_TRUE(decoded_block.value().header.excess_blob_gas.has_value());
    EXPECT_EQ(decoded_block.value().header.excess_blob_gas.value(), 0x50);
    EXPECT_TRUE(
        decoded_block.value().header.parent_beacon_block_root.has_value());
    EXPECT_EQ(
        decoded_block.value().header.parent_beacon_block_root.value(),
        0x0131a0bf6d235767fbd04aa23977a9201bfdb08cd6e588a97fedf5d1cad4ffed_bytes32);

    // Transaction
    EXPECT_EQ(decoded_block.value().transactions.size(), 0);

    // Withdrawals: EIP-4895
    EXPECT_TRUE(decoded_block.value().withdrawals.has_value());
    EXPECT_EQ(decoded_block.value().withdrawals.value().size(), 4);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[0].index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[0].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[0].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[0].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[1].index, 0x02);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[1].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[1].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[1].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[2].index, 0x01);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[2].validator_index, 0x00);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[2].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[2].amount, 0x2710);

    EXPECT_EQ(decoded_block.value().withdrawals.value()[3].index, 0x02);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[3].validator_index, 0x01);
    EXPECT_EQ(
        decoded_block.value().withdrawals.value()[3].recipient,
        0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b_address);
    EXPECT_EQ(decoded_block.value().withdrawals.value()[3].amount, 0x2710);

    // check encoding
    auto const encoded_block_from_decoded =
        rlp::encode_block(decoded_block.value());
    EXPECT_EQ(encoded_block_from_decoded, encoded_block_copy);
}

TEST(Rlp_block, IntTypeMismatchRegression)
{
    using intx::operator""_u256;

    auto const block_header = BlockHeader{
        .base_fee_per_gas = 0xFFFFFFFFFFFFFFFFFF_u256,
    };
    auto const encoded_block_header = rlp::encode_block_header(block_header);
    byte_string_view encoded_block_header_view{encoded_block_header};

    auto const decoded_block_header =
        rlp::decode_block_header(encoded_block_header_view);
    ASSERT_FALSE(decoded_block_header.has_error());
    EXPECT_EQ(decoded_block_header.value(), block_header);
}
