// Copyright (C) 2025 Category Labs, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

// WARNING: THIS FILE CONTAINS GENERATED CODE, DO NOT EDIT MANUALLY! If
// you need changes, change the code generator or its inputs instead. This
// file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s category/execution/ctypes/v1
//    cxx-format -p /home/ken/src/monad -fclang-format-19

/**
 * @file
 *
 * Defines std::formatter specializations for the C types in `eth_ctypes.h`
 */

#include <cstddef>
#include <format>
#include <iterator>
#include <span>
#include <string>
#include <utility>

#include <category/core/hex.hpp>
#include <category/execution/ethereum/core/eth_ctypes.h>
#include <category/vm/runtime/base_ctypes_fmt.hpp>

template <>
struct std::formatter<monad_c_transaction_type> : std::formatter<uint8_t>
{
    template <typename FormatContext>
    auto format(monad_c_transaction_type const &value, FormatContext &ctx) const
    {
        return std::formatter<uint8_t>::format(std::to_underlying(value), ctx);
    }
};

template <>
struct std::formatter<monad_c_access_list_entry> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto
    format(monad_c_access_list_entry const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "access_list_entry {{");
        i = std::format_to(i, "address = {}", value.address);
        i = std::format_to(
            i, ", storage_key_count = {}", value.storage_key_count);
        *i++ = '}';
        auto const *p = reinterpret_cast<std::byte const *>(&value + 1);
        i = std::format_to(
            i,
            ", storage_key list = {}",
            std::span{
                reinterpret_cast<monad_c_bytes32 const *>(p),
                static_cast<size_t>(value.storage_key_count)});
        p += value.storage_key_count * sizeof(monad_c_bytes32);
        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_auth_list_entry> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_auth_list_entry const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "auth_list_entry {{");
        i = std::format_to(i, "chain_id = {}", value.chain_id);
        i = std::format_to(i, ", address = {}", value.address);
        i = std::format_to(i, ", nonce = {}", value.nonce);
        i = std::format_to(i, ", y_parity = {}", value.y_parity);
        i = std::format_to(i, ", r = {}", value.r);
        i = std::format_to(i, ", s = {}", value.s);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_txn_header> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_eth_txn_header const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_txn_header {{");
        i = std::format_to(i, "txn_type = {}", value.txn_type);
        i = std::format_to(i, ", chain_id = {}", value.chain_id);
        i = std::format_to(i, ", nonce = {}", value.nonce);
        i = std::format_to(i, ", gas_limit = {}", value.gas_limit);
        i = std::format_to(i, ", max_fee_per_gas = {}", value.max_fee_per_gas);
        i = std::format_to(
            i,
            ", max_priority_fee_per_gas = {}",
            value.max_priority_fee_per_gas);
        i = std::format_to(i, ", value = {}", value.value);
        i = std::format_to(i, ", to = {}", value.to);
        i = std::format_to(
            i, ", is_contract_creation = {}", value.is_contract_creation);
        i = std::format_to(i, ", r = {}", value.r);
        i = std::format_to(i, ", s = {}", value.s);
        i = std::format_to(i, ", y_parity = {}", value.y_parity);
        i = std::format_to(
            i, ", max_fee_per_blob_gas = {}", value.max_fee_per_blob_gas);
        i = std::format_to(i, ", data_length = {}", value.data_length);
        i = std::format_to(
            i,
            ", blob_versioned_hash_length = {}",
            value.blob_versioned_hash_length);
        i = std::format_to(
            i, ", access_list_count = {}", value.access_list_count);
        i = std::format_to(i, ", auth_list_count = {}", value.auth_list_count);
        *i++ = '}';
        auto const *p = reinterpret_cast<std::byte const *>(&value + 1);
        i = std::format_to(
            i,
            ", data = {:{#x}}",
            MONAD_NAMESPACE::as_hex(span{
                reinterpret_cast<std::byte const *>(p),
                static_cast<size_t>(value.data_length)}));
        p += value.data_length * sizeof(uint8_t);
        i = std::format_to(
            i,
            ", blob_versioned_hash = {}",
            std::span{
                reinterpret_cast<monad_c_bytes32 const *>(p),
                static_cast<size_t>(value.blob_versioned_hash_length)});
        p += value.blob_versioned_hash_length * sizeof(monad_c_bytes32);
        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_txn_receipt> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_eth_txn_receipt const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_txn_receipt {{");
        i = std::format_to(i, "status = {}", value.status);
        i = std::format_to(i, ", log_count = {}", value.log_count);
        i = std::format_to(i, ", gas_used = {}", value.gas_used);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_txn_log> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_eth_txn_log const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_txn_log {{");
        i = std::format_to(i, "index = {}", value.index);
        i = std::format_to(i, ", address = {}", value.address);
        i = std::format_to(i, ", topic_count = {}", value.topic_count);
        i = std::format_to(i, ", data_length = {}", value.data_length);
        *i++ = '}';
        auto const *p = reinterpret_cast<std::byte const *>(&value + 1);
        i = std::format_to(
            i,
            ", topic list = {}",
            std::span{
                reinterpret_cast<monad_c_bytes32 const *>(p),
                static_cast<size_t>(value.topic_count)});
        p += value.topic_count * sizeof(monad_c_bytes32);
        i = std::format_to(
            i,
            ", data = {:{#x}}",
            MONAD_NAMESPACE::as_hex(span{
                reinterpret_cast<std::byte const *>(p),
                static_cast<size_t>(value.data_length)}));
        p += value.data_length * sizeof(uint8_t);
        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_account_state> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto
    format(monad_c_eth_account_state const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_account_state {{");
        i = std::format_to(i, "nonce = {}", value.nonce);
        i = std::format_to(i, ", balance = {}", value.balance);
        i = std::format_to(i, ", code_hash = {}", value.code_hash);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_block_input> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_eth_block_input const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_block_input {{");
        i = std::format_to(i, "ommers_hash = {}", value.ommers_hash);
        i = std::format_to(i, ", beneficiary = {}", value.beneficiary);
        i = std::format_to(
            i, ", transactions_root = {}", value.transactions_root);
        i = std::format_to(i, ", difficulty = {}", value.difficulty);
        i = std::format_to(i, ", number = {}", value.number);
        i = std::format_to(i, ", gas_limit = {}", value.gas_limit);
        i = std::format_to(i, ", timestamp = {}", value.timestamp);
        i = std::format_to(i, ", extra_data = {}", value.extra_data);
        i = std::format_to(
            i, ", extra_data_length = {}", value.extra_data_length);
        i = std::format_to(i, ", prev_randao = {}", value.prev_randao);
        i = std::format_to(i, ", nonce = {}", value.nonce);
        i = std::format_to(
            i, ", base_fee_per_gas = {}", value.base_fee_per_gas);
        i = std::format_to(
            i, ", withdrawals_root = {}", value.withdrawals_root);
        i = std::format_to(i, ", txn_count = {}", value.txn_count);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_eth_block_exec_output>
    : std::formatter<std::string>
{
    template <typename FormatContext>
    auto
    format(monad_c_eth_block_exec_output const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "eth_block_exec_output {{");
        i = std::format_to(i, "state_root = {}", value.state_root);
        i = std::format_to(i, ", receipts_root = {}", value.receipts_root);
        i = std::format_to(i, ", logs_bloom = {}", value.logs_bloom);
        i = std::format_to(i, ", gas_used = {}", value.gas_used);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};

template <>
struct std::formatter<monad_c_secp256k1_pubkey> : std::formatter<std::string>
{
    template <typename FormatContext>
    auto format(monad_c_secp256k1_pubkey const &value, FormatContext &ctx) const
    {
        using MONAD_NAMESPACE::as_hex;
        std::string s;
        std::back_insert_iterator i{s};
        i = std::format_to(i, "secp256k1_pubkey {{");
        i = std::format_to(i, "y_parity = {}", value.y_parity);
        i = std::format_to(i, ", x = {}", value.x);
        *i++ = '}';

        return std::formatter<std::string>::format(s, ctx);
    }
};
