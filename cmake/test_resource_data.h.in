#pragma once

#include <monad/config.hpp>
#include <monad/core/address.hpp>
#include <monad/core/keccak.hpp>
#include <monad/core/monad_block.hpp>
#include <monad/db/trie_db.hpp>
#include <monad/test/config.hpp>

#include <evmc/evmc.h>

#include <filesystem>
#include <optional>
#include <span>

MONAD_NAMESPACE_BEGIN

struct TxnExecOutput;

namespace test_resource
{

    inline std::filesystem::path const test_data_dir = "@TEST_DATA_DIR@";
    inline std::filesystem::path const build_dir = "@CMAKE_BINARY_DIR@";
    inline std::filesystem::path const third_party_dir = "@THIRD_PARTY_DIR@";

    // blocks
    inline auto const correct_block_data_dir =
        test_data_dir / "common" / "blocks" / "compressed_blocks";
    inline auto const bad_decompress_block_data_dir =
        test_data_dir / "common" / "blocks" / "bad_decompress_blocks";
    inline auto const bad_decode_block_data_dir =
        test_data_dir / "common" / "blocks" / "bad_decode_blocks";
    inline auto const self_compressed_block_data_dir =
        test_data_dir / "common" / "blocks" / "self_compressed_blocks";

    // genesis
    inline auto const ethereum_genesis_dir =
        test_data_dir / "common" / "genesis" / "ethereum";

    // ethereum tests
    inline auto const ethereum_tests_dir = third_party_dir / "ethereum-tests";

    inline auto const checkpoint_dir = test_data_dir / "common" / "checkpoint";
}

MONAD_NAMESPACE_END

MONAD_TEST_NAMESPACE_BEGIN

inline constexpr auto ADDR_A =
    0x0000000000000000000000000000000000000100_address;
inline constexpr auto ADDR_B =
    0x0000000000000000000000000000000000000101_address;
inline auto const A_CODE =
    evmc::from_hex("7ffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffff7fffffffffffffffffffffffffffffffffffffffffff"
                   "ffffffffffffffffffffff0160005500")
        .value();
inline auto const A_CODE_HASH = to_bytes(keccak256(A_CODE));
inline auto const A_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(A_CODE));
inline auto const B_CODE =
    evmc::from_hex("60047ffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffffffff0160005500")
        .value();
inline auto const B_CODE_HASH = to_bytes(keccak256(B_CODE));
inline auto const B_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(B_CODE));
inline auto const C_CODE =
    evmc::from_hex("60017ffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffffffff0160005500")
        .value();
inline auto const C_CODE_HASH = to_bytes(keccak256(C_CODE));
inline auto const C_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(C_CODE));
inline auto const D_CODE = evmc::from_hex("600060000160005500").value();
inline auto const D_CODE_HASH = to_bytes(keccak256(D_CODE));
inline auto const D_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(D_CODE));
inline auto const E_CODE =
    evmc::from_hex("7ffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffff60010160005500")
        .value();
inline auto const E_CODE_HASH = to_bytes(keccak256(E_CODE));
inline auto const E_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(E_CODE));
inline auto const H_CODE =
    evmc::from_hex("600060006000600060006004356101000162fffffff100").value();
inline auto const H_CODE_HASH = to_bytes(keccak256(H_CODE));
inline auto const H_CODE_ANALYSIS =
    std::make_shared<CodeAnalysis>(analyze(H_CODE));

inline void commit_sequential(
    Db &db, StateDeltas const &deltas, Code const &code,
    BlockHeader const &eth_header, std::span<Transaction const> txns = {},
    std::span<TxnExecOutput const> txn_exec_outputs = {},
    std::span<BlockHeader const> ommers = {},
    std::optional<std::span<Withdrawal const>> withdrawals = std::nullopt)
{
    auto const consensus_header =
        MonadConsensusBlockHeader::from_eth_header(eth_header);
    db.commit(
        deltas,
        code,
        consensus_header,
        txns,
        txn_exec_outputs,
        ommers,
        withdrawals);
    db.finalize(eth_header.number, consensus_header.round);
    db.set_block_and_round(eth_header.number);
}

inline void load_db(TrieDb &db, uint64_t const n)
{
    commit_sequential(
        db,
        StateDeltas{
            {ADDR_A,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = A_CODE_HASH}},
                 .storage =
                     {{bytes32_t{},
                       {bytes32_t{},
                        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe_bytes32}}}}},
            {ADDR_B,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = B_CODE_HASH}}}},
            {0x0000000000000000000000000000000000000102_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = C_CODE_HASH}}}},
            {0x0000000000000000000000000000000000000103_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = D_CODE_HASH}}}},
            {0x0000000000000000000000000000000000000104_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = E_CODE_HASH}}}},
            {0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba_address,
             StateDelta{
                 .account = {std::nullopt, Account{.balance = 0x7024c}}}},
            {0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{.balance = 0xba1a9ce0b9aa781, .nonce = 1}}}},
            {0xcccccccccccccccccccccccccccccccccccccccc_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9cf,
                          .code_hash = H_CODE_HASH}}}}},
        Code{
            {A_CODE_HASH, A_CODE_ANALYSIS},
            {B_CODE_HASH, B_CODE_ANALYSIS},
            {C_CODE_HASH, C_CODE_ANALYSIS},
            {D_CODE_HASH, D_CODE_ANALYSIS},
            {E_CODE_HASH, E_CODE_ANALYSIS},
            {H_CODE_HASH, H_CODE_ANALYSIS}},
        BlockHeader{.number = n}); // commit to block n, finalized
}

MONAD_TEST_NAMESPACE_END
